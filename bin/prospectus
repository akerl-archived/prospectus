#!/usr/bin/env ruby

require 'prospectus'
require 'mercenary'

def load_list(params)
  return Prospectus.load_from_file(params).check if File.exist? '.prospectus'
  fail('No .prospectus/.prospectus.d found') unless Dir.exist? '.prospectus.d'
  files = Dir.glob('.prospectus.d/*')
  fail('No files in .prospectus.d') if files.empty?
  results = files.map do |x|
    Prospectus.load_from_file({ file: x }.merge(params)).check
  end
  results.flatten
end

Mercenary.program(:prospectus) do |p|
  p.version Prospectus::VERSION
  p.description 'Tool and DSL for checking expected vs actual state'
  p.syntax 'prospectus [options]'

  # rubocop:disable Metrics/LineLength
  p.option :directory, '-d DIR', '--directory DIR', 'Change to directory before loading'
  p.option :good_only, '-g', '--good', 'Show only items with good state'
  p.option :all, '-a', '--all', 'Show all items'
  # rubocop:enable Metrics/LineLength

  p.action do |_, options|
    options[:directory] ||= '.'
    Dir.chdir(options[:directory]) do
      results = load_list(options)
      results.each do |x|
        puts "#{x.name}: #{x.actual} / #{x.expected}"
      end
    end
  end
end
